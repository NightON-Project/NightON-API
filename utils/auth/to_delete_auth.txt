import bcrypt
from flask import current_app
import jwt
from datetime import datetime, timedelta
from flask import request
from functools import wraps


def hash_password(password):
    salt = bcrypt.gensalt()
    hashed_pw = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hashed_pw


def generate_jwt(id_user):
    payload = {
        'user_id': id_user,
        'exp': datetime.utcnow() + timedelta(hours=1)
    }
    token = jwt.encode(
        payload, current_app.config['secret_key'], algorithm='HS256')
    return token


def check_password(plain_password, hashed_password):
    if isinstance(plain_password, str):
        plain_password = plain_password.encode('utf-8')
    byte_hashed_password = bytes(hashed_password)
    return bcrypt.checkpw(plain_password, byte_hashed_password)


def token_required(f):
    @wraps(f)
    def decorated(*args, **kargs):
        token_with_baerer = request.headers.get('Authorization')
        if not token_with_baerer:
            return {'message': 'Token is missing'}, 401
        _, token = token_with_baerer.split(' ', 1)
        try:
            data = jwt.decode(
                token, current_app.config['secret_key'], algorithms=['HS256'])
            current_user = data['user_id']
        except Exception as e:
            return {'message': f'{e}'}, 401
        return f(current_user, *args, **kargs)
    return decorated
